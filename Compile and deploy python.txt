1. Make sure you have PyInstaller installed on your system. If not, you can install it using `pip`:

   pip install pyinstaller

2. Open a terminal and navigate to the directory where your python file is located.

3. Run the following command to compile your Python script into a standalone executable:

   pyinstaller --onefile file.py

   This command will create a `dist` directory containing the compiled executable file and any necessary dependencies.

4. Copy the compiled executable file (which should have the same name as your script but without a file extension) from the `dist` directory to your Linux system.

5. Ensure that the copied executable file has the appropriate permissions to be executed:

   chmod +x /path/to/destination/python.exe

6. Transfer the executable file to your Linux system and run it:

On the other system, you need to ensure that Python is installed along with any dependencies required by your Python script. Additionally, if you are using a compiled executable generated by PyInstaller, you don't need to have Python installed on the other system.

sudo apt-get update
sudo apt-get upgrade
sudo apt-get install python3
sudo apt-get install python3-pip

However, you should check if there are any specific dependencies or requirements for your script. These dependencies might include external libraries or packages that are needed for your script to run successfully. You can typically find the required dependencies listed in the `requirements.txt` file if it exists in your project directory.

To install the dependencies on the other system, you can use the following command:

pip install -r requirements.txt

This command will install all the required dependencies listed in the `requirements.txt` file.

To run the file on the server you install tmux 

sudo apt-get install tmux

Navigate to the directory where your Python script is located.

Run the following command to start a new tmux session:

tmux new -s session_name

Then run your program!

You can close the SSH, to reopen attach the session

tmux attach-session -t session_name

To switch between windows use Ctrl+b + session number

To list the sessions use 

tmux ls

To close the window without terminating the process, you can detach from the tmux session. Use Ctrl+b, followed by d.

To terminate the process inside the window, you can use the appropriate command depending on the process you are running.

If you are running a Python script, you can press Ctrl+C to send an interrupt signal and stop the script.

tmux kill-session -t session_name

To adjust time 

apt update
apt install ntpdate
ntpdate pool.ntp.org
